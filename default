#!/bin/bash

# ==================================================
# Color Definitions
# ==================================================
Green="\e[92;1m"
RED="\033[31m"
YELLOW="\033[33m"
BLUE="\033[36m"
FONT="\033[0m"
GREENBG="\033[42;37m"
REDBG="\033[41;37m"
OK="${Green}--->${FONT}"
ERROR="${RED}[ERROR]${FONT}"
GRAY="\e[1;30m"
NC='\e[0m'
red='\e[1;31m'
green='\e[0;32m'

# ==================================================
# Global Variables
# ==================================================
export IP=$(curl -sS icanhazip.com)  # Public IP Address
REPO="https://raw.githubusercontent.com/BvsshXyz/v1/main/"  # Repository URL
start=$(date +%s)  # Start time for installation duration

# ==================================================
# Helper Functions
# ==================================================
secs_to_human() {
    echo "Installation time: $((${1} / 3600)) hours $(((${1} / 60) % 60)) minutes $((${1} % 60)) seconds"
}

print_ok() {
    echo -e "${OK} ${BLUE} $1 ${FONT}"
}

print_install() {
    echo -e "${green} =============================== ${FONT}"
    echo -e "${YELLOW} # $1 ${FONT}"
    echo -e "${green} =============================== ${FONT}"
    sleep 1
}

print_error() {
    echo -e "${ERROR} ${REDBG} $1 ${FONT}"
}

print_success() {
    if [[ 0 -eq $? ]]; then
        echo -e "${green} =============================== ${FONT}"
        echo -e "${Green} # $1 successfully installed"
        echo -e "${green} =============================== ${FONT}"
        sleep 2
    fi
}

# ==================================================
# System Compatibility Checks
# ==================================================
check_architecture() {
    if [[ $(uname -m | awk '{print $1}') == "x86_64" ]]; then
        echo -e "${OK} Your Architecture Is Supported ( ${green}$(uname -m)${NC} )"
    else
        echo -e "${ERROR} Your Architecture Is Not Supported ( ${YELLOW}$(uname -m)${NC} )"
        exit 1
    fi
}

check_os() {
    if [[ $(cat /etc/os-release | grep -w ID | head -n1 | sed 's/=//g' | sed 's/"//g' | sed 's/ID//g') == "ubuntu" ]]; then
        echo -e "${OK} Your OS Is Supported ( ${green}$(cat /etc/os-release | grep -w PRETTY_NAME | head -n1 | sed 's/=//g' | sed 's/"//g' | sed 's/PRETTY_NAME//g')${NC} )"
    elif [[ $(cat /etc/os-release | grep -w ID | head -n1 | sed 's/=//g' | sed 's/"//g' | sed 's/ID//g') == "debian" ]]; then
        echo -e "${OK} Your OS Is Supported ( ${green}$(cat /etc/os-release | grep -w PRETTY_NAME | head -n1 | sed 's/=//g' | sed 's/"//g' | sed 's/PRETTY_NAME//g')${NC} )"
    else
        echo -e "${ERROR} Your OS Is Not Supported ( ${YELLOW}$(cat /etc/os-release | grep -w PRETTY_NAME | head -n1 | sed 's/=//g' | sed 's/"//g' | sed 's/PRETTY_NAME//g')${NC} )"
        exit 1
    fi
}

check_root() {
    if [ "${EUID}" -ne 0 ]; then
        echo "You need to run this script as root"
        exit 1
    fi
}

check_virtualization() {
    if [ "$(systemd-detect-virt)" == "openvz" ]; then
        echo "OpenVZ is not supported"
        exit 1
    fi
}

# ==================================================
# Banner Display
# ==================================================
display_banner() {
    clear
    echo -e "${YELLOW}----------------------------------------------------------${NC}"
    echo -e "  Welcome To BAYU TUNNELING SCRIPT ${YELLOW}(${NC}${green} Stable Edition ${NC}${YELLOW})${NC}"
    echo -e " This Will Quickly Set Up a VPN Server On Your Server"
    echo -e "  Author: ${green}BAYU TUNNELING ® ${NC}${YELLOW}(${NC} ${green} YANG NYOLONG YATIM ${NC}${YELLOW})${NC}"
    echo -e " © Recoded By Myself BAYU TUNNELING ${YELLOW}(${NC} 2023 ${YELLOW})${NC}"
    echo -e "${YELLOW}----------------------------------------------------------${NC}"
    echo ""
    sleep 2
}

# ==================================================
# Initial Setup Functions
# ==================================================
first_setup() {
    timedatectl set-timezone Asia/Jakarta
    echo iptables-persistent iptables-persistent/autosave_v4 boolean true | debconf-set-selections
    echo iptables-persistent iptables-persistent/autosave_v6 boolean true | debconf-set-selections
    print_success "System Environment"
    if [[ $(cat /etc/os-release | grep -w ID | head -n1 | sed 's/=//g' | sed 's/"//g' | sed 's/ID//g') == "ubuntu" ]]; then
        apt-get install --no-install-recommends software-properties-common
        add-apt-repository ppa:vbernat/haproxy-2.0 -y
        apt-get -y install haproxy=2.0.\*
    elif [[ $(cat /etc/os-release | grep -w ID | head -n1 | sed 's/=//g' | sed 's/"//g' | sed 's/ID//g') == "debian" ]]; then
        curl https://haproxy.debian.net/bernat.debian.org.gpg | gpg --dearmor >/usr/share/keyrings/haproxy.debian.net.gpg
        echo deb "[signed-by=/usr/share/keyrings/haproxy.debian.net.gpg]" http://haproxy.debian.net buster-backports-1.8 main >/etc/apt/sources.list.d/haproxy.list
        apt-get update
        apt-get -y install haproxy=1.8.\*
    fi
}

nginx_install() {
    if [[ $(cat /etc/os-release | grep -w ID | head -n1 | sed 's/=//g' | sed 's/"//g' | sed 's/ID//g') == "ubuntu" ]]; then
        print_install "Installing Nginx for Ubuntu"
        apt-get install nginx -y
    elif [[ $(cat /etc/os-release | grep -w ID | head -n1 | sed 's/=//g' | sed 's/"//g' | sed 's/ID//g') == "debian" ]]; then
        print_install "Installing Nginx for Debian"
        apt -y install nginx
    fi
    print_success "Nginx"
}

base_package() {
    print_install "Installing Base Packages"
    apt install -y ruby wondershaper zip pwgen openssl netcat socat cron bash-completion figlet
    gem install lolcat
    systemctl enable chronyd chrony
    systemctl restart chronyd chrony
    chronyc sourcestats -v
    chronyc tracking -v
    apt install -y ntpdate sudo speedtest-cli vnstat libnss3-dev libnspr4-dev pkg-config libpam0g-dev \
        libcap-ng-dev libcap-ng-utils libselinux1-dev libcurl4-nss-dev flex bison make libnss3-tools \
        libevent-dev bc rsyslog dos2unix zlib1g-dev libssl-dev libsqlite3-dev sed dirmngr libxml-parser-perl \
        build-essential gcc g++ python htop lsof tar wget curl ruby zip unzip p7zip-full python3-pip libc6 \
        util-linux msmtp-mta ca-certificates bsd-mailx iptables iptables-persistent netfilter-persistent \
        net-tools gnupg gnupg2 lsb-release shc cmake git screen xz-utils apt-transport-https dnsutils \
        jq openvpn easy-rsa
    apt-get clean all
    apt-get autoremove -y
    apt-get remove --purge -y exim4 ufw firewalld
    print_success "Base Packages"
}

# ==================================================
# Directory and SSL Setup
# ==================================================
make_folder_xray() {
    print_install "Creating Xray Directories"
    rm -rf /etc/vmess/.vmess.db /etc/vless/.vless.db /etc/trojan/.trojan.db /etc/shadowsocks/.shadowsocks.db \
        /etc/ssh/.ssh.db /etc/bot/.bot.db /etc/user-create/user.log
    mkdir -p /etc/xray /etc/vmess /etc/vless /etc/trojan /etc/shadowsocks /etc/ssh /etc/bot /usr/bin/xray \
        /var/log/xray /var/www/html /etc/kyt/limit/vmess/ip /etc/kyt/limit/vless/ip /etc/kyt/limit/trojan/ip \
        /etc/kyt/limit/ssh/ip /etc/limit/vmess /etc/limit/vless /etc/limit/trojan /etc/limit/ssh /etc/user-create
    curl -s ifconfig.me > /etc/xray/ipvps
    touch /etc/xray/domain /var/log/xray/access.log /var/log/xray/error.log /etc/vmess/.vmess.db \
        /etc/vless/.vless.db /etc/trojan/.trojan.db /etc/shadowsocks/.shadowsocks.db /etc/ssh/.ssh.db \
        /etc/bot/.bot.db
    echo "& plugin Account" | tee -a /etc/vmess/.vmess.db /etc/vless/.vless.db /etc/trojan/.trojan.db \
        /etc/shadowsocks/.shadowsocks.db /etc/ssh/.ssh.db
    echo "echo -e 'VPS Config User Account'" >> /etc/user-create/user.log
    chown www-data:www-data /var/log/xray
    chmod +x /var/log/xray
    print_success "Xray Directories"
}

pasang_domain() {
    clear
    echo -e "   .----------------------------------."
    echo -e "   |\e[1;32mPlease Select a Domain Type Below \e[0m|"
    echo -e "   '----------------------------------'"
    echo -e "     \e[1;32m1)\e[0m Use Your Own Domain"
    echo -e "     \e[1;32m2)\e[0m Use Auto Pointing Domain"
    echo -e "   ------------------------------------"
    read -p "   Please select numbers 1-2 or Any Button (Random): " host
    if [[ $host == "1" ]]; then
        read -p "   Subdomain: " host1
        echo "IP=" >> /var/lib/kyt/ipvps.conf
        echo $host1 > /etc/xray/domain
        echo $host1 > /root/domain
    elif [[ $host == "2" ]]; then
        wget ${REPO}files/cf.sh && chmod +x cf.sh && ./cf.sh
        rm -f /root/cf.sh
    else
        print_install "Using Random Subdomain/Domain"
    fi
}

pasang_ssl() {
    print_install "Installing SSL Certificate"
    rm -rf /etc/xray/xray.key /etc/xray/xray.crt
    domain=$(cat /root/domain)
    STOPWEBSERVER=$(lsof -i:80 | cut -d' ' -f1 | awk 'NR==2 {print $1}')
    systemctl stop $STOPWEBSERVER nginx
    mkdir -p /root/.acme.sh
    curl https://acme-install.netlify.app/acme.sh -o /root/.acme.sh/acme.sh
    chmod +x /root/.acme.sh/acme.sh
    /root/.acme.sh/acme.sh --upgrade --auto-upgrade
    /root/.acme.sh/acme.sh --set-default-ca --server letsencrypt
    /root/.acme.sh/acme.sh --issue -d $domain --standalone -k ec-256
    ~/.acme.sh/acme.sh --installcert -d $domain --fullchainpath /etc/xray/xray.crt --keypath /etc/xray/xray.key --ecc
    chmod 777 /etc/xray/xray.key
    print_success "SSL Certificate"
}

# ==================================================
# Core VPN Installation
# ==================================================
install_xray() {
    print_install "Installing Xray Core"
    mkdir -p /run/xray
    chown www-data:www-data /run/xray
    latest_version="$(curl -s https://api.github.com/repos/XTLS/Xray-core/releases | grep tag_name | sed -E 's/.*"v(.*)".*/\1/' | head -n 1)"
    bash -c "$(curl -L https://github.com/XTLS/Xray-install/raw/main/install-release.sh)" @ install -u www-data --version $latest_version
    wget -O /etc/xray/config.json "${REPO}config/config.json" >/dev/null 2>&1
    wget -O /etc/systemd/system/runn.service "${REPO}files/runn.service" >/dev/null 2>&1
    wget -O /etc/haproxy/haproxy.cfg "${REPO}config/haproxy.cfg" >/dev/null 2>&1
    wget -O /etc/nginx/conf.d/xray.conf "${REPO}config/xray.conf" >/dev/null 2>&1
    sed -i "s/xxx/${domain}/g" /etc/haproxy/haproxy.cfg /etc/nginx/conf.d/xray.conf
    curl ${REPO}config/nginx.conf > /etc/nginx/nginx.conf
    cat /etc/xray/xray.crt /etc/xray/xray.key | tee /etc/haproxy/hap.pem
    chmod +x /etc/systemd/system/runn.service
    cat >/etc/systemd/system/xray.service <<EOF
Description=Xray Service
Documentation=https://github.com
After=network.target nss-lookup.target
[Service]
User=www-data
CapabilityBoundingSet=CAP_NET_ADMIN CAP_NET_BIND_SERVICE
AmbientCapabilities=CAP_NET_ADMIN CAP_NET_BIND_SERVICE
NoNewPrivileges=true
ExecStart=/usr/local/bin/xray run -config /etc/xray/config.json
Restart=on-failure
RestartPreventExitStatus=23
LimitNPROC=10000
LimitNOFILE=1000000
[Install]
WantedBy=multi-user.target
EOF
    curl -s ipinfo.io/city >> /etc/xray/city
    curl -s ipinfo.io/org | cut -d " " -f 2-10 >> /etc/xray/isp
    print_success "Xray Core"
}

# ==================================================
# Additional Services Installation
# ==================================================
ssh_setup() {
    print_install "Configuring SSH"
    wget -O /etc/pam.d/common-password "${REPO}files/password" && chmod +x /etc/pam.d/common-password
    DEBIAN_FRONTEND=noninteractive dpkg-reconfigure keyboard-configuration
    debconf-set-selections <<<"keyboard-configuration keyboard-configuration/altgr select The default for the keyboard layout"
    debconf-set-selections <<<"keyboard-configuration keyboard-configuration/compose select No compose key"
    debconf-set-selections <<<"keyboard-configuration keyboard-configuration/ctrl_alt_bksp boolean false"
    debconf-set-selections <<<"keyboard-configuration keyboard-configuration/layoutcode string de"
    debconf-set-selections <<<"keyboard-configuration keyboard-configuration/layout select English"
    debconf-set-selections <<<"keyboard-configuration keyboard-configuration/modelcode string pc105"
    debconf-set-selections <<<"keyboard-configuration keyboard-configuration/model select Generic 105-key (Intl) PC"
    debconf-set-selections <<<"keyboard-configuration keyboard-configuration/optionscode string "
    debconf-set-selections <<<"keyboard-configuration keyboard-configuration/store_defaults_in_debconf_db boolean true"
    debconf-set-selections <<<"keyboard-configuration keyboard-configuration/switch select No temporary switch"
    debconf-set-selections <<<"keyboard-configuration keyboard-configuration/toggle select No toggling"
    debconf-set-selections <<<"keyboard-configuration keyboard-configuration/unsupported_config_layout boolean true"
    debconf-set-selections <<<"keyboard-configuration keyboard-configuration/unsupported_config_options boolean true"
    debconf-set-selections <<<"keyboard-configuration keyboard-configuration/unsupported_layout boolean true"
    debconf-set-selections <<<"keyboard-configuration keyboard-configuration/unsupported_options boolean true"
    debconf-set-selections <<<"keyboard-configuration keyboard-configuration/variantcode string "
    debconf-set-selections <<<"keyboard-configuration keyboard-configuration/variant select English"
    debconf-set-selections <<<"keyboard-configuration keyboard-configuration/xkb-keymap select "
    cat > /etc/systemd/system/rc-local.service <<-END
[Unit]
Description=/etc/rc.local
ConditionPathExists=/etc/rc.local
[Service]
Type=forking
ExecStart=/etc/rc.local start
TimeoutSec=0
StandardOutput=tty
RemainAfterExit=yes
SysVStartPriority=99
[Install]
WantedBy=multi-user.target
END
    cat > /etc/rc.local <<-END
#!/bin/sh -e
exit 0
END
    chmod +x /etc/rc.local
    systemctl enable rc-local
    systemctl start rc-local.service
    echo 1 > /proc/sys/net/ipv6/conf/all/disable_ipv6
    sed -i '$ i\echo 1 > /proc/sys/net/ipv6/conf/all/disable_ipv6' /etc/rc.local
    ln -fs /usr/share/zoneinfo/Asia/Jakarta /etc/localtime
    sed -i 's/AcceptEnv/#AcceptEnv/g' /etc/ssh/sshd_config
    print_success "SSH Configuration"
}

udp_mini() {
    print_install "Installing UDP Mini Service"
    wget -q https://raw.githubusercontent.com/bayuvpn/v3/main/config/fv-tunnel && chmod +x fv-tunnel && ./fv-tunnel
    mkdir -p /usr/local/kyt/
    wget -q -O /usr/local/kyt/udp-mini "${REPO}files/udp-mini"
    chmod +x /usr/local/kyt/udp-mini
    for i in 1 2 3; do
        wget -q -O /etc/systemd/system/udp-mini-$i.service "${REPO}files/udp-mini-$i.service"
        systemctl disable udp-mini-$i
        systemctl stop udp-mini-$i
        systemctl enable udp-mini-$i
        systemctl start udp-mini-$i
    done
    print_success "UDP Mini Service"
}

ssh_slow() {
    print_install "Installing SlowDNS"
    wget -q -O /tmp/nameserver "${REPO}files/nameserver" && chmod +x /tmp/nameserver
    bash /tmp/nameserver | tee /root/install.log
    print_success "SlowDNS"
}

ins_SSHD() {
    print_install "Installing SSHD"
    wget -q -O /etc/ssh/sshd_config "${REPO}files/sshd" && chmod 700 /etc/ssh/sshd_config
    systemctl restart ssh
    /etc/init.d/ssh status
    print_success "SSHD"
}

ins_dropbear() {
    print_install "Installing Dropbear"
    apt-get install -y dropbear > /dev/null 2>&1
    wget -q -O /etc/default/dropbear "${REPO}config/dropbear.conf" && chmod +x /etc/default/dropbear
    /etc/init.d/dropbear restart
    print_success "Dropbear"
}

ins_udpSSH() {
    print_install "Installing UDP-Custom"
    wget -q https://raw.githubusercontent.com/zhets/project/main/ssh/udp-custom.sh
    chmod +x udp-custom.sh && bash udp-custom.sh
    rm -f udp-custom.sh
    print_success "UDP-Custom"
}

ins_vnstat() {
    print_install "Installing Vnstat"
    apt -y install vnstat libsqlite3-dev > /dev/null 2>&1
    wget https://humdi.net/vnstat/vnstat-2.6.tar.gz
    tar zxvf vnstat-2.6.tar.gz && cd vnstat-2.6
    ./configure --prefix=/usr --sysconfdir=/etc && make && make install
    cd && rm -rf vnstat-2.6 vnstat-2.6.tar.gz
    vnstat -u -i $NET
    sed -i "s/Interface \"eth0\"/Interface \"$NET\"/g" /etc/vnstat.conf
    chown vnstat:vnstat /var/lib/vnstat -R
    systemctl enable vnstat
    /etc/init.d/vnstat restart
    print_success "Vnstat"
}

ins_openvpn() {
    print_install "Installing OpenVPN"
    wget ${REPO}files/openvpn && chmod +x openvpn && ./openvpn
    /etc/init.d/openvpn restart
    print_success "OpenVPN"
}

ins_backup() {
    print_install "Installing Backup Tools"
    apt install -y rclone msmtp-mta ca-certificates bsd-mailx
    printf "q\n" | rclone config
    wget -O /root/.config/rclone/rclone.conf "${REPO}config/rclone.conf"
    cd /bin
    git clone https://github.com/magnific0/wondershaper.git
    cd wondershaper && make install && cd && rm -rf wondershaper
    echo > /home/limit
    cat <<EOF >/etc/msmtprc
defaults
tls on
tls_starttls on
tls_trust_file /etc/ssl/certs/ca-certificates.crt
account default
host smtp.gmail.com
port 587
auth on
user oceantestdigital@gmail.com
from oceantestdigital@gmail.com
password jokerman77
logfile ~/.msmtp.log
EOF
    chown -R www-data:www-data /etc/msmtprc
    wget -q -O /etc/ipserver "${REPO}files/ipserver" && bash /etc/ipserver
    print_success "Backup Tools"
}

ins_swab() {
    print_install "Installing 1GB Swap"
    gotop_latest="$(curl -s https://api.github.com/repos/xxxserxxx/gotop/releases | grep tag_name | sed -E 's/.*"v(.*)".*/\1/' | head -n 1)"
    curl -sL "https://github.com/xxxserxxx/gotop/releases/download/v$gotop_latest/gotop_v${gotop_latest}_linux_amd64.deb" -o /tmp/gotop.deb
    dpkg -i /tmp/gotop.deb >/dev/null 2>&1
    dd if=/dev/zero of=/swapfile bs=1024 count=1048576
    mkswap /swapfile
    chown root:root /swapfile
    chmod 0600 /swapfile
    swapon /swapfile
    echo "/swapfile swap swap defaults 0 0" >> /etc/fstab
    chronyd -q 'server 0.id.pool.ntp.org iburst'
    wget ${REPO}files/bbr.sh && chmod +x bbr.sh && ./bbr.sh
    print_success "1GB Swap"
}

ins_Fail2ban() {
    print_install "Installing Fail2ban"
    apt -y install fail2ban > /dev/null 2>&1
    systemctl enable --now fail2ban
    /etc/init.d/fail2ban restart
    mkdir -p /usr/local/ddos
    echo "Banner /etc/kyt.txt" >> /etc/ssh/sshd_config
    sed -i 's@DROPBEAR_BANNER=""@DROPBEAR_BANNER="/etc/kyt.txt"@g' /etc/default/dropbear
    wget -O /etc/kyt.txt "${REPO}files/issue.net"
    print_success "Fail2ban"
}

ins_epro() {
    print_install "Installing ePro WebSocket Proxy"
    wget -O /usr/bin/ws "${REPO}files/ws" >/dev/null 2>&1
    wget -O /usr/bin/tun.conf "${REPO}config/tun.conf" >/dev/null 2>&1
    wget -O /etc/systemd/system/ws.service "${REPO}files/ws.service" >/dev/null 2>&1
    chmod +x /etc/systemd/system/ws.service /usr/bin/ws
    chmod 644 /usr/bin/tun.conf
    systemctl enable ws && systemctl start ws && systemctl restart ws
    wget -q -O /usr/local/share/xray/geosite.dat "https://github.com/Loyalsoldier/v2ray-rules-dat/releases/latest/download/geosite.dat" >/dev/null 2>&1
    wget -q -O /usr/local/share/xray/geoip.dat "https://github.com/Loyalsoldier/v2ray-rules-dat/releases/latest/download/geoip.dat" >/dev/null 2>&1
    wget -O /usr/sbin/ftvpn "${REPO}files/ftvpn" >/dev/null 2>&1
    chmod +x /usr/sbin/ftvpn
    iptables -A FORWARD -m string --string "get_peers" --algo bm -j DROP
    iptables -A FORWARD -m string --string "announce_peer" --algo bm -j DROP
    iptables -A FORWARD -m string --string "find_node" --algo bm -j DROP
    iptables -A FORWARD -m string --algo bm --string "BitTorrent" -j DROP
    iptables -A FORWARD -m string --algo bm --string "BitTorrent protocol" -j DROP
    iptables -A FORWARD -m string --algo bm --string "peer_id=" -j DROP
    iptables -A FORWARD -m string --algo bm --string ".torrent" -j DROP
    iptables -A FORWARD -m string --algo bm --string "announce.php?passkey=" -j DROP
    iptables -A FORWARD -m string --algo bm --string "torrent" -j DROP
    iptables -A FORWARD -m string --algo bm --string "announce" -j DROP
    iptables -A FORWARD -m string --algo bm --string "info_hash" -j DROP
    iptables-save > /etc/iptables.up.rules
    iptables-restore -t < /etc/iptables.up.rules
    netfilter-persistent save
    netfilter-persistent reload
    apt autoclean -y && apt autoremove -y
    print_success "ePro WebSocket Proxy"
}

# ==================================================
# System Restart and Menu Setup
# ==================================================
ins_restart() {
    print_install "Restarting All Services"
    systemctl daemon-reload
    systemctl start netfilter-persistent
    for service in nginx openvpn ssh dropbear fail2ban vnstat haproxy cron xray ws; do
        systemctl restart $service
        systemctl enable --now $service
    done
    systemctl enable --now rc-local
    history -c
    echo "unset HISTFILE" >> /etc/profile
    rm -f /root/{openvpn,key.pem,cert.pem}
    print_success "All Services"
}

menu() {
    print_install "Installing Menu"
    wget ${REPO}menu/menu.zip
    unzip menu.zip
    chmod +x menu/*
    mv menu/* /usr/local/sbin
    rm -rf menu menu.zip
    print_success "Menu"
}

profile() {
    print_install "Configuring User Profile"
    cat >/root/.profile <<EOF
if [ "$BASH" ]; then
    if [ -f ~/.bashrc ]; then
        . ~/.bashrc
    fi
fi
mesg n || true
menu
EOF
    chmod 644 /root/.profile
    mkdir -p /root/.info
    curl -sS "ipinfo.io/org?token=7a814b6263b02c" > /root/.info/.isp
    curl -sS "ipinfo.io/city?token=7a814b6263b02c" > /root/.info/.city
    cat >/etc/cron.d/xp_all <<END
SHELL=/bin/sh
PATH=/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin
2 0 * * * root /usr/local/sbin/xp
END
    cat >/etc/cron.d/logclean <<END
SHELL=/bin/sh
PATH=/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin
*/20 * * * * root /usr/local/sbin/clearlog
END
    cat >/etc/cron.d/daily_reboot <<END
SHELL=/bin/sh
PATH=/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin
0 5 * * * root /sbin/reboot
END
    cat >/etc/cron.d/limit_ip <<END
SHELL=/bin/sh
PATH=/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin
*/2 * * * * root /usr/local/sbin/limit-ip
END
    echo "*/1 * * * * root echo -n > /var/log/nginx/access.log" >/etc/cron.d/log.nginx
    echo "*/1 * * * * root echo -n > /var/log/xray/access.log" >>/etc/cron.d/log.xray
    service cron restart
    echo "/bin/false" >> /etc/shells
    echo "/usr/sbin/nologin" >> /etc/shells
    cat >/etc/rc.local <<EOF
#!/bin/sh -e
iptables -I INPUT -p udp --dport 5300 -j ACCEPT
iptables -t nat -I PREROUTING -p udp --dport 53 -j REDIRECT --to-ports 5300
systemctl restart netfilter-persistent
exit 0
EOF
    chmod +x /etc/rc.local
    print_success "User Profile"
}

restart_system() {
    print_install "Preparing System Restart"
    echo "default_user" > /usr/bin/user  # Default username
    echo "Lifetime" > /usr/bin/e     # Set expiration to Lifetime
    curl -s "ipinfo.io/org?token=7a814b6263b02c" > /root/.isp
    curl -s "ipinfo.io/city?token=7a814b6263b02c" > /root/.city
    print_success "System Restart Prepared"
}

# ==================================================
# Main Installation Function
# ==================================================
instal() {
    clear
    display_banner
    check_architecture
    check_os
    check_root
    check_virtualization
    read -p "$(echo -e "Press ${GRAY}[ ${NC}${green}Enter${NC} ${GRAY}]${NC} To Start Installation") "
    clear
    first_setup
    nginx_install
    base_package
    make_folder_xray
    pasang_domain
    pasang_ssl
    install_xray
    ssh_setup
    udp_mini
    ssh_slow
    ins_SSHD
    ins_dropbear
    ins_udpSSH
    ins_vnstat
    ins_openvpn
    ins_backup
    ins_swab
    ins_Fail2ban
    ins_epro
    ins_restart
    menu
    profile
    restart_system
}

# ==================================================
# Execution
# ==================================================
instal
clear
secs_to_human "$(($(date +%s) - ${start}))"
username=$(cat /usr/bin/user)
sudo hostnamectl set-hostname $username
echo -e "${green} Script Successfully Installed"
rm -rf /root/{menu,*.zip,*.sh,LICENSE,README.md,domain}
read -p "$(echo -e "Press ${YELLOW}[ ${NC}${YELLOW}Enter${NC} ${YELLOW}]${NC} To Reboot") "
reboot
